// Code generated by go-bindata.
// sources:
// views/index.tpl
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x6f\x1b\x37\x13\xbe\xe7\x57\x30\x84\x13\xc9\x89\xf6\x43\x8e\xdf\xbc\x8a\xac\x55\x51\xa4\x2e\x90\x5e\xea\x02\x76\xd1\x02\x05\x82\x11\x77\x24\x51\xe6\x92\x34\xc9\x5d\x49\x29\x02\xf4\xd2\xde\xfb\x71\x29\xd0\x5e\x0a\x14\xed\xa5\x68\x6f\xbd\xe5\xdf\x38\x70\xff\x45\xc1\x5d\x69\xb5\xb2\xe5\xd4\xbe\x98\xcb\x99\x79\x66\xf8\x3c\x33\x03\x0d\xee\x7f\xf0\xf1\xf3\xd3\xcf\x4f\x8e\xc9\xd4\x65\x62\x78\x6f\x50\xfd\x23\x64\x30\x45\x48\xfd\x81\x90\x81\xe3\x4e\xe0\xf0\xd3\x17\x27\xe4\xea\xb7\x6f\xfe\xf9\xe5\xdb\xb7\xdf\xfd\xf1\xf6\x87\x37\x97\x3f\xfe\x3e\x88\x2a\x53\xe5\x96\xa1\x03\x22\x21\xc3\x84\x16\x1c\xe7\x5a\x19\x47\x09\x53\xd2\xa1\x74\x09\x9d\xf3\xd4\x4d\x93\x14\x0b\xce\x30\x28\x3f\x3a\x5c\x72\xc7\x41\x04\x96\x81\xc0\xa4\x1b\xc6\x9d\x12\xc8\xff\x65\x5c\xf2\x2c\xcf\x1a\xa6\x0c\x16\xd7\x6e\x72\x8b\xa6\xfc\x84\x91\xc0\x44\x2a\x4a\x86\xab\xf8\x66\x29\xa0\xb5\xc0\x80\xbb\x5c\xa2\x0d\x40\xeb\x46\x49\x94\x44\xbb\x22\xc6\xca\x64\xe0\x82\x14\x1d\x32\xc7\x95\x6c\x44\x38\x14\xa8\xa7\x4a\xfa\x74\x1d\x02\x69\x6a\xd0\xda\xff\x48\x9d\xa9\x11\x17\x18\xcc\x71\xe4\xd3\x07\x0c\xb4\xaf\xb7\x01\xba\x44\x7b\x4b\x25\x3b\x01\xac\x03\x97\xdb\x60\x04\x26\xb0\x6e\xb9\x85\x34\x12\xc0\xce\x03\x67\x40\x5a\x91\x33\x94\xee\x06\xee\xd4\x39\x1d\xe0\x45\xce\x8b\x84\x7e\x16\x9c\xbd\x1f\x3c\x57\x99\x06\xc7\xb7\x2b\x7a\x71\x9c\x1c\xa7\x13\xec\xb0\xa9\x51\x19\x26\x5d\x7a\x3b\x88\x36\x30\xc9\xa0\x11\x2b\x55\xc0\x80\x4d\x91\x36\xbb\xa2\x19\x51\x5a\x03\xef\x6f\x94\xd8\x11\xd8\xc9\x72\xeb\x02\x83\x05\x08\x9e\x82\xbb\x1d\x08\x17\x9a\x1b\xcf\x5d\x0d\x11\xbf\xa3\xd0\x73\x5c\xce\x95\x49\x9b\xee\x1f\xa9\x25\x43\x72\x22\x60\x89\xe6\x1d\x91\x29\x5a\x66\xb8\xbe\xd6\x0a\x77\x0c\x5e\xf9\x07\x6e\xa9\x9b\x0c\x7b\x65\x39\x03\x8f\x19\x2d\xfc\xcc\x3d\x5e\x64\xe2\x88\x4d\xc1\x58\x74\xc9\xd9\xe9\x87\x41\x8f\x0e\xef\x55\x0f\x2f\x55\x26\x1e\xc0\x37\xe0\xc2\x45\xcc\xda\x3a\x63\xe8\x21\x81\x4b\x34\xe4\xcb\x7a\x7a\xca\xf1\xea\x93\x6e\x7c\x70\xa8\x17\x47\xf5\xf5\x14\xf9\x64\xea\xfa\x04\x72\xa7\x36\xb7\x19\x98\x09\x97\x7d\x12\xeb\xc5\x96\xe5\xf5\x3a\x03\x94\x53\xb0\x0b\x3e\x7e\x70\x13\xfc\x30\x6e\xa6\xf4\xf5\x06\x20\xf8\x44\xf6\x89\x6f\x48\x34\x37\xe0\x75\x49\xe1\x5d\xe1\x6f\x56\x38\x88\x4a\x82\xca\xa5\x15\x55\x5b\xcb\x1f\x47\x2a\x5d\xae\x3a\x27\xe5\x05\x61\x02\xac\xad\xe4\x28\xd9\xda\x48\xd6\xb0\x56\x2f\xad\x4d\x84\x5c\xfd\xf9\xf7\xd5\x9b\xef\x2f\xbf\xfe\xb5\x5a\x7c\x97\x3f\xfd\x75\xf9\xf3\x57\x7d\x32\xe0\x52\xe7\x6e\x25\x49\x6e\x04\x25\x05\x88\x1c\x13\xea\x95\xef\x47\xd1\x7c\x3e\x0f\xb3\x89\x2b\x42\xa6\xb2\xa8\x88\x0e\xa2\x6e\x7c\xd8\xeb\xfe\x3f\x1a\x47\x4f\x0e\x0f\x9e\xf6\x7a\x71\xe8\x25\xa7\xeb\xb4\x05\x4f\x51\x9d\x79\x18\xcb\x5f\x61\x42\x9f\xc5\x0f\x68\xf9\xd0\xb1\x62\xb9\x2f\x6b\x7d\xa4\x44\x0b\x60\x38\x55\x22\x45\x93\xd0\x9d\xd5\x35\xaa\xdf\x2a\x73\x94\x3b\xe7\x1b\xb8\x24\x2b\xa1\x95\xea\x81\xc0\xb1\xf3\x54\xeb\xc5\x51\xfd\x88\x6a\xbd\x57\x98\x94\x28\xc9\x04\x67\xe7\x09\x9d\x41\x01\xd5\x20\xf4\xbd\x64\xed\xfd\xa3\x0d\x87\x51\xca\x8b\x5d\x84\xea\xed\xf1\xf0\x25\x8d\x0d\x64\xd8\xb4\xbf\xdc\x68\x52\x49\x9f\x50\x2f\x3d\x5d\x49\x9e\xd0\xa7\x71\x4c\x6b\x00\x42\x40\x08\x35\x3f\xf5\x3b\x4e\x83\x41\xc9\x96\x09\x75\x26\x47\x4a\x4a\xe4\x91\x32\x25\x37\x31\x25\x96\x19\x25\x04\x97\x13\xbf\x5b\xe8\x70\x10\x55\xb9\x77\x14\xdd\x3c\x56\x4f\x24\xd6\xb0\x5a\x4e\xc1\x47\xa1\xe5\x12\x40\xeb\x52\xd1\x99\x8d\x66\x17\x39\x9a\x65\xd4\x0d\x9f\x85\xdd\xd5\x47\x50\x7e\x84\x19\x97\xe1\xcc\xfa\x74\x15\xd2\x36\x6c\x63\x8a\x37\x7c\xd6\xfc\xdc\x9f\x73\x99\xaa\x79\x38\xfb\xc4\x03\x92\x87\x0f\x49\xaa\x58\x9e\xa1\x74\xe1\xdc\x70\x87\xed\xd6\x56\x79\x75\xde\x5e\xf8\x64\x93\xf7\x8b\x75\xe2\xd6\xfe\xd1\xbd\x15\x70\xf4\x68\x4d\xe0\x23\x72\xb1\x7c\x45\x0e\xba\x24\x18\x92\x3b\x74\x6b\xfc\xbf\xde\x61\xb7\xec\xd6\x6b\x00\x07\x77\x04\xd8\xb4\x7b\x0d\x10\xad\x4e\x05\x18\xdf\xcf\x4b\x92\x90\xf6\x38\x97\xe5\xec\xb5\xf7\x37\x7b\xc0\xdb\xf7\xca\xd9\x78\x99\x1b\x41\x12\xb2\xd7\x6e\x85\xeb\x59\x69\xed\x77\x1a\x3d\xb1\xb7\xdd\x48\x2b\xdf\xed\x4b\x4f\xc7\xda\x9f\x29\x69\x95\xc0\x50\xa8\x49\x7b\x93\xe2\x36\x87\x6d\x9c\x86\xd7\x35\x4b\x08\xce\x99\x76\xcb\x1a\xd6\xea\x90\xd6\x8a\x9c\xd9\x02\x34\x0f\x25\x6a\x0e\xb2\x24\x88\x9d\x6b\xbf\xe5\xa3\xf7\x72\x23\x92\x16\x79\xdc\x78\x63\x58\x80\x68\xef\xd7\x09\x5e\xaf\x4e\xcd\x56\x1a\x44\xd5\x62\x1b\x44\xe5\x2f\xb5\x7f\x03\x00\x00\xff\xff\xa2\x97\x29\xb9\xc0\x09\x00\x00")

func viewsIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexTpl,
		"views/index.tpl",
	)
}

func viewsIndexTpl() (*asset, error) {
	bytes, err := viewsIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.tpl", size: 2496, mode: os.FileMode(438), modTime: time.Unix(1473746635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/index.tpl": viewsIndexTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"index.tpl": &bintree{viewsIndexTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
