/******************************************************************************
 *  版权所有（C）上海互普信息技术股份有限公司                 *
 *  保留所有权利。                                                            *
 ******************************************************************************
 *  作者 : zzhw
 *  版本 : <当前版本号>
 *****************************************************************************/

#include "stdafx.h"
#include <Windows.h>
#include <string>
#include <Psapi.h>
#include "CustomCheck.h"
#include "../../common/GlobalFunction/GlobalFunction.h"

using namespace std;
#pragma comment (lib, "Psapi.lib")

BOOL ProcIsIncludeDll(IN DWORD dwProcessId, IN const wchar_t* pszIncludedDllName)
{
	HMODULE hMods[1024] = {0};
	HANDLE hProcess = NULL;
	DWORD dwNeeded = 0;
	unsigned int i = 0;
	BOOL bRet = FALSE;

	hProcess = OpenProcess( PROCESS_QUERY_INFORMATION|PROCESS_VM_READ, FALSE, dwProcessId );
	if (NULL == hProcess)
	{
		return bRet;
	}

	HMODULE hModule = LoadLibraryW(L"PSAPI.DLL");
	string strIncludedDllName = WCharToAnsi(pszIncludedDllName);

	if (hModule == NULL)
	{
		return bRet;
	}

	pFnEnumProcessModulesEx pEnumProcessModulesEx;
	pEnumProcessModulesEx = (pFnEnumProcessModulesEx)GetProcAddress(hModule, "EnumProcessModulesEx");

	if (pEnumProcessModulesEx)
	{
		bRet = pEnumProcessModulesEx(hProcess, hMods, sizeof(hMods), &dwNeeded, LIST_MODULES_ALL);

		if(bRet)
		{
			bRet = FALSE;
			for ( i = 0; i < (dwNeeded/sizeof(HMODULE)); i++ )
			{
				TCHAR szModName[MAX_PATH];

				if ( GetModuleFileNameEx( hProcess, hMods[i], szModName, sizeof(szModName)/sizeof(TCHAR)))
				{
					string strModName = WCharToAnsi(szModName);

					if (StrIStr(strModName, strIncludedDllName.c_str()) != string::npos)
					{
						bRet = TRUE;
						break;
					}
				}
			}
		}
	}
	else
	{
		if(EnumProcessModules(hProcess, hMods, sizeof(hMods), &dwNeeded))
		{
			for ( i = 0; i < (dwNeeded/sizeof(HMODULE)); i++ )
			{
				TCHAR szModName[MAX_PATH];

				if ( GetModuleFileNameEx( hProcess, hMods[i], szModName, sizeof(szModName)/sizeof(TCHAR)))
				{
					string strModName = WCharToAnsi(szModName);

					if (StrIStr(strModName, strIncludedDllName.c_str()) != string::npos)
					{
						bRet = TRUE;
						break;
					}
				}
			}
		}
	}

	if (hModule != NULL)
	{
		FreeLibrary(hModule);
		hModule = NULL;
	}
	CloseHandle( hProcess );

	return bRet;
}
