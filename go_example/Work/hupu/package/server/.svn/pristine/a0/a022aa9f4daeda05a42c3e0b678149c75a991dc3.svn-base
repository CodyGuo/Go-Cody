#pragma once

#include "GlobalDate.h"
#include "strconvert.h"

#define MAX_BUF_LEN 256 

/////////////////////////////////////////////////////
//气泡提示
const char SOCKTIPAPPNAME[] = "SOCK_TIP";
typedef enum _SOCKTIPKEY
{
	SOCK_TIP_TITLE=0,
	SOCK_TIP_DEFAULTTIP,
	SOCK_TIP_CONNECTSERV,
	SOCK_TIP_UPDATE,
	SOCK_TIP_LOGONSUCC,
	SOCK_TIP_DEVICETOSERV,
	SOCK_TIP_SERVUSER,
	SOCK_TIP_FORCETOOFFLINE,
	SOCK_TIP_LOGOFF,
	SOCK_TIP_LOGON,
	SOCK_TIP_LOGOFFISOLATION,
	SOCK_TIP_LOGONISOLATION,
	SOCK_TIP_KEYISOLATION,
	SOCK_TIP_ASCESCAPEORDISABLE,
	SOCK_TIP_ASCLOGOFF,
	SOCK_TIP_SFCHECKONLINE,
	SOCK_TIP_SFCHECKOFFLINE,
	SOCK_TIP_UNINSTALL,
	SOCK_TIP_RESTART,
	SOCK_TIP_NATIGNORE,
	SOCK_TIP_NATFORBIT,
	SOCK_TIP_SWITCHTEC,
	SOCK_TIP_DISCONONLINE,
	SOCK_TIP_NETWORKCHANGE,
	SOCK_TIP_SWITCHUSER,
	SOCK_TIP_SWITCHLANG,
	SOCK_TIP_AUTOREDISTER,
	SOCK_TIP_PWDEXPIRED,
	SOCK_TIP_TOTAL,
}SOCKTIPKEY;
extern const char *SOCKTIPKEYSTR[SOCK_TIP_TOTAL];
////////////////////////////////////////////////////

//密码过期
const char USERPWDEXPIRED[2] = {"1"};
//
//////////////////////////////////////////////////////
//域用户检查
const char SFDOMAINAPPNAME[] = "SF_SFDOMAIN";
typedef enum _SFDOMAINKEY
{
	SF_SFDOMAIN_NAME=0,
	SF_SFDOMAIN_WHITEUSER,
	SF_SFDOMAIN_INDOMAINBLACKUSER,
	SF_SFDOMAIN_NOTDOMAINBLACKUSER,
	SF_SFDOMAIN_INREFUSEDOMAIN,
	SF_SFDOMAIN_NOTDOMAINNEEDDOMAIN,
	SF_SFDOMAIN_INDOMAINNEEDDOMAIN,
	SF_SFDOMAIN_INREFUSEDOMAINNEEDDOMAIN,
	SF_SFDOMAIN_INDOMAINNOTDOMAINUSER,
	SF_SFDOMAIN_IDENTIFYTIPTITLE,
	SF_SFDOMAIN_IDENTIFYTIPAPPENDINFP,
	SF_SFDOMAIN_IDENTIFYTIPAPPENDHOUR,
	SF_SFDOMAIN_IDENTIFYBLACKUSER,
	SF_SFDOMAIN_IDENTIFYWHITEUSER,
	SF_SFDOMAIN_IDENTIFYSUCCESS,
	SF_SFDOMAIN_IDENTIFYFAIL,
	SF_SFDOMAIN_IDENTIFYDELAYOFFLINE,
	SF_SFDOMAIN_IDENTIFYDELAYOFFLINEBLACKUSER,
	SF_SFDOMAIN_TOTAL,
}SFDOMAINKEY;

extern const char *SFDOMAINKEYSTR[SF_SFDOMAIN_TOTAL];
/////////////////////////////////////////////////////////

//自定义检查
#define CUSTOM_CHECK_APPNAME "SF_CUSTOM_CHECK_MSG"

typedef enum _SFCUSTOMCHECKKEY
{
	SF_CHECK_SUCESS_ILLEGAL=0,
	SF_FILE_EXIST,
	SF_FILE_NOT_EXIST,
	SF_FILESIZE_NOT_EXIST,
	SF_FILESIZE_MORE,
	SF_FILESIZE_LESS,
	SF_FILESIZE_NO_EQUAL,
	SF_FILESIZE_EQUAL,
	SF_FILEMD5_NOT_EXIST,
	SF_FILEMD5_EQUAL,
	SF_FILEMD5_NO_EQUAL,
	SF_FILE_VERSION_NOT_EXIST,
	SF_FILE_VERSION_GET_FALSE,
	SF_FILE_VERSION_MORE,
	SF_FILE_VERSION_LESS,
	SF_FILE_VERSION_NO_EQUAL,
	SF_FILE_VERSION_EQUAL,

	SF_REG_EXIST,
	SF_REG_NOT_EXIST,
	SF_REGVALUE_EXIST,
	SF_REGVALUE_NOT_EXIST,
	SF_REGVALUEEQUAL_NOT_EXIST,
	SF_REGVALUEEQUAL_MORE,
	SF_REGVALUEEQUAL_LESS,
	SF_REGVALUEEQUAL_EQUAL,
	SF_REGVALUEEQUAL_NO_EQUAL,
	SF_REGVALUEEQUAL_INCLUDE,
	SF_REGVALUEEQUAL_NO_INCLUDE,

	SF_PROC_EXIST,
	SF_PROC_NOT_EXIST,
	SF_PROC_NOT_INCLUD,
	SF_PROC_INCLUD,
	SF_PORT_EXIST,
	SF_PORT_NOT_EXIST,
	SF_PORT_OR_EXIST,
	SF_PORT_OR_NOT_EXIST,
	SF_PORT_AND_EXIST,
	SF_PORT_AND_NOT_EXIST,

	SF_SERVICE_EXIST,
	SF_SERVICE_NOT_EXIST,
	SF_SERVICE_RUN,
	SF_SERVICE_NOT_RUN,

	SF_PROC_RETURN_SET_FALSE,
	SF_PROC_RETURN_GET_FALSE,
	SF_PROC_RETURN_CMP_FALSE,
	SF_PROC_RETURN_CMP_TRUE,
	SF_PROC_OUTPUT_INCLUD,
	SF_PROC_OUTPUT_NOT_INCLUD,

	SF_SFCUSTOMCHECK_TOTAL,

}SFCUSTOMCHECKKEY;

extern const char *pSfCustomKeyStr[SF_SFCUSTOMCHECK_TOTAL];

//桌面背景
#define DESKWALL_APPNAME "SF_DESKWALL_MSG"

typedef enum _SFDESKWALLKEY
{
	SF_DESKWALL_NAME=0,
	SF_WALL_PAPER_FALSE,
	SF_DESK_STYLE_FALSE,
	SF_DESKWALL_STYLE_FALSE,
	SF_DESKWALL_TOTAL,
}SFDESKWALLKEY;

extern const char *pSfDeskWallKeyStr[SF_DESKWALL_TOTAL];

//IE控件检查
#define IEEXTENSION_APPNAME "SF_IEEXTENSION_MSG"

typedef enum _SFIEEXTENSIONKEY
{
	SF_IEEXTENSION_NAME=0,
	SF_IEEXTENSION_MUSTINSTALL,
	SF_IEEXTENSION_NEEDUNINSTALL,
	SF_IEEXTENSION_NEEDENABLE,
	SF_IEEXTENSIONL_TOTAL,
}SFIEEXTENSIONKEY;

extern const char *pSfIEExtensionKeyStr[SF_IEEXTENSIONL_TOTAL];

//密码策略检查
#define PWDPOLICY_APPNAME "SF_PWDPOLICY_MSG"

typedef enum _SFPWDPOLICYKEY
{
	SF_PWDPOLICY_NAME=0,
	SF_PWDCOMPLEXITY_FALSE,
	SF_PWDMINLEN_FALSE,
	SF_PWDMAXAGE_FALSE,
	SF_PWDPOLICY_FALSE,
	SF_PWDPOLICY_TOTAL,
}SFPWDPOLICYKEY;

extern const char *pSfPwdPolicyKeyStr[SF_PWDPOLICY_TOTAL];

//垃圾文件检查
#define JUNKFILES_APPNAME "SF_JUNKFILES_MSG"

typedef enum _SFJUNKFILESKEY
{
	SF_JUNKFILES_NAME=0,
	SF_JUNKFILES_RECYCLEBIN_TEMP_FALSE,
	SF_JUNKFILES_RECYCLEBIN_FALSE,
	SF_JUNKFILES_TEMP_FALSE,
	SF_JUNKFILES_TOTAL,
}SFJUNKFILESKEY;

extern const char *pSfJunkFileKeyStr[SF_JUNKFILES_TOTAL];

class CGetLangValue
{
public:
	CGetLangValue(void);
	~CGetLangValue(void);
};

void GetLangValueByKeyA(LANGUAGETYPE lang,const char* appname,const char* keyname,const char* defaultvalue,char* valueA,int valuesize);

void GetLangValueByKeyW(LANGUAGETYPE lang,const char* appname,const char* keyname,const char* defaultvalue,wchar_t* valueW,int valuesize);

BOOL GetLangVectorByKeyA(LANGUAGETYPE lang,const char* appname,const char* keyname,const char* defaultvalue,int strsize,unsigned int paramnum,vector<string>* valuevecA);

BOOL GetLangVectorByKeyW(LANGUAGETYPE lang,const char* appname,const char* keyname,const char* defaultvalue,int strsize,unsigned int paramnum,vector<wstring>* valuevecW);

string PackageLangInfo(	IN LANGUAGETYPE lang, 
						IN const char* szAppName, 
						IN const char* szKeyName, 
						IN const char* szDefaultValue, 
						IN int iStrSize, 
						IN unsigned int iParaNnum, 
						IN vector<string> vectStr);

