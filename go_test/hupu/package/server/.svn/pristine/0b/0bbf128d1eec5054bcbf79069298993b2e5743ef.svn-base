/******************************************************************************
 *  版权所有（C）上海互普信息技术有限公司                 *
 *  保留所有权利。										  *
 ******************************************************************************
 *  作者 : zzhw
 *  版本 : <当前版本号>
 *****************************************************************************/
#include "StdAfx.h"
#include <Windows.h>
#include "Hp8021x.h"
#include "../GlobalFunction.h"
#include "../GlobalDate.h"
#pragma comment(lib, "IPHLPAPI.lib")
#include <iphlpapi.h>

#include <Sensapi.h>
#include <winnt.h>
#include "../DebugInfo.h"
#pragma comment(lib, "Sensapi.lib")
#include "../GetLangValue.h"

#define WM_USER_DISPLAY_INFO_NOTIFY	WM_USER+1

#define MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x))
#define FREE(x) HeapFree(GetProcessHeap(), 0, (x))

HWND h8021xWnd = NULL;
HINSTANCE hHupu8021xDll = NULL;
int m_connectStatus = AUTHENTICATION_FAILURE;
USERINFO m_8021x_user_info;
int iCheckNetStatusNum = 0;
BOOL g_bEnable8021x = FALSE;

BOOL IsEnable8021x()
{
	try
	{
		BOOL bRet = FALSE;
		char netAccessTech[4]={0};
		string strIniFilePath = g_nacdirpath;

		strIniFilePath += "\\data\\";
		strIniFilePath += "VersAndLog_config.ini";

		GetPrivateProfileStringA("Param", "NetworkAccessTechnology", "1", netAccessTech, 4, strIniFilePath.c_str());

		if (_strnicmp(netAccessTech, ENABLE_8021X_TECH, strlen(ENABLE_8021X_TECH)) == 0 )
		{
			bRet = TRUE;
			g_bEnable8021x = TRUE;
		}

		g_osVer = GetOsVersionInfo();

		return bRet;
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "IsEnable8021x Exception");
	}
	return FALSE;
}

void Load8021xMenu(IN CWnd* pWnd)
{
	POINT point;
	CMenu MyMenu;
	CMenu* pMyMenu = NULL; 

	::GetCursorPos(&point);
	SetForegroundWindow(pWnd->m_hWnd);
	MyMenu.LoadMenu(IDR_MENU_8021X);
	pMyMenu = MyMenu.GetSubMenu(0);

	if (!m_connectStatus)
	{
		pMyMenu->EnableMenuItem(1, MF_BYPOSITION|MF_DISABLED|MF_GRAYED);
	}
	else
	{
		pMyMenu->EnableMenuItem(1, MF_BYPOSITION|MF_ENABLED);
	}

	pMyMenu->TrackPopupMenu(TPM_LEFTBUTTON|TPM_LEFTALIGN, point.x, point.y, pWnd);
	MyMenu.DestroyMenu();
}

HWND Load8021xAuthenWindow(IN HWND hMainWnd)
{
	try
	{
		char curPath[MAX_PATH] = {0};
		string strDllPath = "";
		HWND hAuthenWnd = NULL;

		GetCurrentPath(curPath);
		strDllPath = (string)curPath;
		strDllPath += "Hupu802.1x.dll";

		hHupu8021xDll = LoadLibraryA(strDllPath.c_str()); 

		if (hHupu8021xDll == NULL)
		{
			return hAuthenWnd;
		}

		pShowAuthenWindowsDlg fShowAuthenWindowsDlg = NULL;
		fShowAuthenWindowsDlg = (pShowAuthenWindowsDlg)GetProcAddress(hHupu8021xDll, "ShowAuthenWindowsDlg");
		if (fShowAuthenWindowsDlg == NULL)
		{
			return hAuthenWnd;
		}

		hAuthenWnd = fShowAuthenWindowsDlg(hMainWnd);

		return hAuthenWnd;
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "Load8021xAuthenWindow Exception");
	}

	return NULL;
}

void Show8021xWindow(IN HWND hMainWnd)
{
	try
	{
		if (h8021xWnd && ::IsWindow(h8021xWnd))
		{
			ShowWindow(h8021xWnd, SW_SHOW);
		}
		else
		{
			h8021xWnd = Load8021xAuthenWindow(hMainWnd);
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "Show8021xWindow Exception");
	}
}

void ConnectingNetwork()
{
	try
	{
		if (hHupu8021xDll != NULL)
		{
			pConnectingNetwork fConnectingNetwork = NULL;
			fConnectingNetwork = (pConnectingNetwork)GetProcAddress(hHupu8021xDll, "ConnectingNetwork");
			if (fConnectingNetwork != NULL)
			{
				fConnectingNetwork();
			}
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "ConnectingNetwork Exception");
	}
}

void MenuDisableNetwork()
{
	try
	{
		if (hHupu8021xDll != NULL)
		{
			pDisconnectNetwork fDisconnectNetwork = NULL;
			fDisconnectNetwork = (pDisconnectNetwork)GetProcAddress(hHupu8021xDll, "DisconnectNetwork");
			if (fDisconnectNetwork != NULL)
			{
				fDisconnectNetwork();
			}
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "MenuDisableNetwork Exception");
	}
}

void Free8021xResource()
{
	try
	{
		if(h8021xWnd)
		{
			::DestroyWindow(h8021xWnd);
			h8021xWnd = NULL;
		}

		if(hHupu8021xDll != NULL)
		{
			pClearResource fClearResource = NULL;
			fClearResource = (pClearResource)GetProcAddress(hHupu8021xDll, "ClearResource");
			if (fClearResource != NULL)
			{
				fClearResource();
			}

			FreeLibrary(hHupu8021xDll);
			hHupu8021xDll = NULL;
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "Free8021xResource Exception");
	}
}

wstring GetDllShareBuf()
{
	wstring wstrRetBuf = L"";

	try
	{
		if (hHupu8021xDll != NULL)
		{
			pGetShareBuf fGetShareBuf = NULL;
			fGetShareBuf = (pGetShareBuf)GetProcAddress(hHupu8021xDll, "GetShareBuf");
			if (fGetShareBuf != NULL)
			{
				wchar_t wstrShareBuf[MAX_BUF_LEN] = {0};

				fGetShareBuf(wstrShareBuf);
				wstrRetBuf = (wstring)wstrShareBuf;
			}
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "GetDllShareBuf Exception");
	}

	return wstrRetBuf;
}

void LogonNotifyMsgHandle(IN ChpidmnacDlg* phpidmnacDlg)
{
	try
	{
		string strStatusFlag = "";
		wstring wstrShareBuf = GetDllShareBuf();

		if (_wcsnicmp(wstrShareBuf.c_str(), L"AuthenNetWork:", wcslen(L"AuthenNetWork:")) == 0)
		{
			wstring wstrGetInfo = (wstring)wstrShareBuf.c_str();
			size_t szColonPos = wstring::npos;

			szColonPos = wstrGetInfo.find(L":");
			if (szColonPos != wstring::npos)
			{
				size_t szSemicolonPos = wstrGetInfo.find(L";");
				wstring wstrAuthenNet = wstrGetInfo.substr(szColonPos+1, szSemicolonPos-szColonPos-1);
				string strAuthenNet = WCharToAnsi(wstrAuthenNet.c_str());
				wstring wstrUserName = L"";
				wstring wstrPwd = L"";

				wstrGetInfo = wstrGetInfo.substr(szSemicolonPos+1);
				szSemicolonPos = wstrGetInfo.find(L";");
				if (szColonPos != wstring::npos)
				{
					wstrUserName = wstrGetInfo.substr(0, szSemicolonPos);

					wstrGetInfo = wstrGetInfo.substr(szSemicolonPos+1);
					szSemicolonPos = wstrGetInfo.find(L";");
					if (szColonPos != wstring::npos)
					{
						wstrPwd = wstrGetInfo.substr(0, szSemicolonPos);
					}
				}

				WritePrivateProfileStringA("Device", "AUTHEN_NETWORK", strAuthenNet.c_str(), phpidmnacDlg->m_inipath);
				m_8021x_user_info.username = WCharToAnsi(wstrUserName.c_str());
				m_8021x_user_info.userpwd = WCharToAnsi(wstrPwd.c_str());
			}

			m_connectStatus = UNDER_AUTHENTICATION;
			strStatusFlag = AUTHEN_SUCCESSS_FLAG;

			if (g_osVer.dwMajorVersion >= 6)
			{
				phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGOFF], _T("认证中..."), _T("认证中..."), _T("提示"), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
			}
			WritePrivateProfileStringA("Param", "state", strStatusFlag.c_str(), phpidmnacDlg->m_inipath);
		}
		else
		{
			if(!wcscmp(wstrShareBuf.c_str(), L"SUCCESS"))
			{
				m_connectStatus = AUTHENTICATION_SUCCESS;
				strStatusFlag = AUTHEN_SUCCESSS_FLAG;

				if (g_osVer.dwMajorVersion >= 6) 
				{
					phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGON], _T("认证成功"), _T("认证成功"), _T("提示"), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
				}
			}
			else if(!wcscmp(wstrShareBuf.c_str(), L"FAILED"))
			{
				m_connectStatus = AUTHENTICATION_FAILURE;
				strStatusFlag = AUTHEN_FAILURE_FLAG;

				if (g_osVer.dwMajorVersion >= 6)
				{
					phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGOFF], _T("认证失败"), _T("认证失败"), _T("提示"), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
				}
			}
			else if (!wcscmp(wstrShareBuf.c_str(), L"断开网络.") || 
				!wcscmp(wstrShareBuf.c_str(), L"断开连接."))
			{
				wstring wstrTipInfo =(wstring)wstrShareBuf.c_str();

				if (m_connectStatus == AUTHENTICATION_SUCCESS)
				{
					phpidmnacDlg->pestablishJob.m_userinfo.username = m_8021x_user_info.username;
					phpidmnacDlg->pestablishJob.m_userinfo.userpwd = m_8021x_user_info.userpwd;
					phpidmnacDlg->pestablishJob.m_userinfo.usertype = USER;
					phpidmnacDlg->pestablishJob.m_userinfo.autologon = AUTOLOGON;
					phpidmnacDlg->pestablishJob.m_userinfo.usercomfrom = USERAUTOLOGON;
					phpidmnacDlg->pestablishJob.SendServerOfflineOrOnlineInfo(LOGOFF, "客户端断开网络");
				}

				m_connectStatus = AUTHENTICATION_FAILURE;
				strStatusFlag = AUTHEN_FAILURE_FLAG;

				if (g_osVer.dwMajorVersion >= 6)
				{
					phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGOFF], wstrTipInfo.c_str(), wstrTipInfo.c_str(), _T("提示"), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
				}
			}
			WritePrivateProfileStringA("Param", "state", strStatusFlag.c_str(), phpidmnacDlg->m_inipath);
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "LogonNotifyMsgHandle Exception");
	}
}

int GetAuthenNetWorkStatus(IN ChpidmnacDlg* phpidmnacDlg)
{
	try
	{
		DWORD dwSize = 0;
		DWORD dwRetVal = 0;
		int i;
		MIB_IFTABLE *pIfTable;
		MIB_IFROW *pIfRow;
		int iRet = FALSE;

		pIfTable = (MIB_IFTABLE *)MALLOC(sizeof(MIB_IFTABLE));
		if (pIfTable == NULL) 
		{
			return iRet;
		}
		dwSize = sizeof(MIB_IFTABLE);

		if (GetIfTable(pIfTable, &dwSize, FALSE) == ERROR_INSUFFICIENT_BUFFER)
		{
			FREE(pIfTable);
			pIfTable = (MIB_IFTABLE *)MALLOC(dwSize);

			if (pIfTable == NULL)
			{
				return iRet;
			}
		}

		if ((dwRetVal = GetIfTable(pIfTable, &dwSize, FALSE)) == NO_ERROR) 
		{
			char authenNetWorkInfo[128]={0};

			GetPrivateProfileStringA("Device", "AUTHEN_NETWORK", "########", authenNetWorkInfo, 128, phpidmnacDlg->m_inipath);

			if (strlen(authenNetWorkInfo) > 3 && _strnicmp(authenNetWorkInfo, "########", strlen("########")) != 0 )
			{
				for (i = 0; i < (int)pIfTable->dwNumEntries; i++) 
				{
					pIfRow = (MIB_IFROW *)&pIfTable->table[i];

					if(_strnicmp(authenNetWorkInfo, (const char*)pIfRow->bDescr, min(pIfRow->dwDescrLen, strlen(authenNetWorkInfo))) == 0)
					{
						DWORD dwFlags = 0;

						if ((pIfRow->dwOperStatus == IF_OPER_STATUS_OPERATIONAL ||
							pIfRow->dwOperStatus == IF_OPER_STATUS_CONNECTED) && IsNetworkAlive(&dwFlags))
						{
							char authenStatus[4] = {0};

							GetPrivateProfileStringA("Param", "state", AUTHEN_FAILURE_FLAG, authenStatus, 4, phpidmnacDlg->m_inipath);
							if (_strnicmp(authenStatus, AUTHEN_SUCCESSS_FLAG, strlen(AUTHEN_SUCCESSS_FLAG)) == 0 && m_connectStatus == AUTHENTICATION_FAILURE)
							{
								if (iCheckNetStatusNum < 2)
								{
									iCheckNetStatusNum++;								
								}	
								if (iCheckNetStatusNum == 2)
								{
									Show8021xWindow(phpidmnacDlg->m_hWnd);
									ConnectingNetwork();
									iCheckNetStatusNum = 0;
								}
							}
							iRet = TRUE;
						}
						break;
					}
				}
			}
		} 

		if (pIfTable != NULL)
		{
			FREE(pIfTable);
			pIfTable = NULL;
		}

		if (!iRet)
		{
			if (iCheckNetStatusNum < 3)
			{
				wstring wtrMsg = L"断开网络.";
				char authenStatus[4] = {0};

				GetPrivateProfileStringA("Param", "state", AUTHEN_FAILURE_FLAG, authenStatus, 4, phpidmnacDlg->m_inipath);

				if (m_connectStatus == AUTHENTICATION_SUCCESS || _strnicmp(authenStatus, AUTHEN_SUCCESSS_FLAG, strlen(AUTHEN_SUCCESSS_FLAG)) == 0 )
				{
					MenuDisableNetwork();
					if (iCheckNetStatusNum > 0 )
					{
						if (g_osVer.dwMajorVersion >= 6)
						{
							phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGOFF], wtrMsg.c_str(), wtrMsg.c_str(), _T("提示"), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
						}
					}
					WritePrivateProfileStringA("Param", "state", AUTHEN_FAILURE_FLAG, phpidmnacDlg->m_inipath);
					WritePrivateProfileStringA("Device", "AUTHEN_NETWORK", "########", phpidmnacDlg->m_inipath);
					m_connectStatus = AUTHENTICATION_FAILURE;
				}
				WritePrivateProfileStringA("Param", "NetworkAccessTechnology", ENABLE_8021X_TECH, phpidmnacDlg->m_inipath);
				g_bEnable8021x = TRUE;

				iCheckNetStatusNum++;
			}
			else
			{
				iCheckNetStatusNum = 0;
			}
		}

		return iRet;
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "GetAuthenNetWorkStatus Exception");
	}

	return FALSE;
}

void HandleNotifyLogoffMsg(IN const char* pNotifyMsg, IN ChpidmnacDlg* phpidmnacDlg)
{
	try
	{
		wstring wstrNotifyMsg = AnsiToWChar(pNotifyMsg);
		wstring wstrNotifyStatus = L"";

		wchar_t tiptitle[HP_C_USERCONTENTLEN] = {L"0"};
		GetLangValueByKeyW((LANGUAGETYPE)phpidmnacDlg->m_langtype,SOCKTIPAPPNAME,SOCKTIPKEYSTR[SOCK_TIP_TITLE],
			SOCKTIPKEYSTR[SOCK_TIP_TITLE],tiptitle,sizeof(tiptitle));
		wchar_t forceonline[HP_C_USERCONTENTLEN] = {L"0"};
		GetLangValueByKeyW((LANGUAGETYPE)phpidmnacDlg->m_langtype,SOCKTIPAPPNAME,SOCKTIPKEYSTR[SOCK_TIP_FORCETOOFFLINE],
			SOCKTIPKEYSTR[SOCK_TIP_FORCETOOFFLINE],forceonline,sizeof(forceonline));

		wstring wtrTitleMsg = tiptitle;
		wstring wtrTipMsg = forceonline;

		size_t stPos = wstring::npos;
		int iNotifyStatus = STATELESS;

		stPos = wstrNotifyMsg.find(L";");
		if (stPos != wstring::npos)
		{
			wstrNotifyStatus = wstrNotifyMsg.substr(0, stPos);
			iNotifyStatus = _wtoi(wstrNotifyStatus.c_str());

			wstrNotifyMsg = wstrNotifyMsg.substr(stPos+1);
			stPos = wstrNotifyMsg.find(L":");

			if (stPos != wstring::npos)
			{
				wtrTitleMsg = wstrNotifyMsg.substr(0, stPos);
				wtrTipMsg = wstrNotifyMsg.substr(stPos+1);
			}
		}

		if (m_connectStatus == AUTHENTICATION_SUCCESS && iNotifyStatus == LOGOFF)
		{
			MenuDisableNetwork();
			if (g_osVer.dwMajorVersion >= 6)
			{
				phpidmnacDlg->ChangeTrayInfo(phpidmnacDlg->m_hIconState[LOGOFF], wtrTipMsg.c_str(), wtrTipMsg.c_str(), wtrTitleMsg.c_str(), phpidmnacDlg->pestablishJob.m_iTipMsgSilence);
			}
			WritePrivateProfileStringA("Param", "state", AUTHEN_FAILURE_FLAG, phpidmnacDlg->m_inipath);
			m_connectStatus = AUTHENTICATION_FAILURE;
		}
	}
	catch (...)
	{
		WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "HandleNotifyLogoffMsg Exception");
	}
}