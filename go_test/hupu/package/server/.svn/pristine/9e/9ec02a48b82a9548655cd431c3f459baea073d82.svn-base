#include "StdAfx.h"
#include "Ccalcpacket.h"
#include "lspdef.h"
#include <stdio.h>
#include <stdlib.h>
#include "..\common\preheader.h"


int CompareData(double data1,double data2)
{
	char msginfo[256] = {"0"};
	sprintf_s(msginfo,sizeof(msginfo),"data1=%f,data2=%f",data1,data2);
	dbgprint(msginfo);

	if(data1>data2)
		return 1;
	else if(data1 == data2)
		return 0;
	else 
		return -1;
}

int CompareLongData(double srcdata,int srcdataunit,double ruledata,int ruledataunit)
{
	char msginfo[256] = {"0"};
	sprintf_s(msginfo,sizeof(msginfo),"CompareLongData:srcdata=%f,srcdataunit=%d,ruledata=%f,ruledataunit=%d",srcdata,srcdataunit,
		ruledata,ruledataunit);
	dbgprint(msginfo);

	if(srcdataunit == ruledataunit)//单位一样,则直接比较大小
	{
		return CompareData(srcdata,ruledata);
	}
	else//单位不一样，则换算成较大单位的值进行比较
	{
		if(srcdataunit>ruledataunit)
		{
			dbgprint("srcdataunit>ruledataunit");
			for(int i=ruledataunit+1;i<=srcdataunit;i++)
			{
				ruledata = ruledata/1024.0;
			}
		}
		else
		{
			dbgprint("srcdataunit<ruledataunit");
			for(int i=srcdataunit+1;i<=ruledataunit;i++)
			{
				srcdata = srcdata/1024.0;
			}
		}
		char datainfo[256] = {"0"};
		sprintf_s(datainfo,sizeof(datainfo),"srcdata=%f,ruledata=%f",srcdata,ruledata);
		dbgprint(datainfo);
		return CompareData(srcdata,ruledata);
	}
}

unsigned long GetNetSpeed(double totaldata,double rulespeed,unsigned long timediff)
{
	double calcspeed = totaldata/timediff;
	unsigned long sleeptime = 0;
	if(calcspeed>rulespeed)
	{
		sleeptime = (totaldata/rulespeed-timediff)*1000;
		char msginfo[256] = {"0"};
		sprintf_s(msginfo,sizeof(msginfo),"CompateNetSpeed: current speed = %f,sleeptime=%u",
			calcspeed,sleeptime);
		dbgprint(msginfo);
	}
	return sleeptime;
}

//返回0表示不需要没有超过配置的网速，不需要等待，大于0的值表示需要等待
unsigned long CompateNetSpeed(double srcdata,int srcdataunit,double rulespeed,
	int rulespeedunit,unsigned long timediff)
{
	double speed = 0;
	unsigned long sleeptime = 0;
	if( srcdataunit == rulespeedunit )
	{
		return GetNetSpeed(srcdata,rulespeed,timediff);
	}
	else
	{
		if(srcdataunit > rulespeedunit)
		{
			for(int i=rulespeedunit+1;i<=rulespeedunit;i++)
			{
				rulespeed = rulespeed/1024.0;
			}
		}
		else
		{
			for(int i=srcdataunit+1;i<=rulespeedunit;i++)
			{
				srcdata = srcdata/1024.0;
			}
		}
		return GetNetSpeed(srcdata,rulespeed,timediff);
	}
}


int GetStaticalPacket(double *totaldata,int *totaldataunit,double packetlen)
{
	double srcdata = *totaldata;
	int srcdataunit = *totaldataunit;
	double addres = 0;

	if( srcdataunit == BUNIT)
		addres = srcdata+packetlen;
	else if(srcdataunit == KBUNIT )
	   addres = srcdata+packetlen/1024.0;
	else if(srcdataunit == MUNIT)
		addres = srcdata+packetlen/1024.0/1024.0;
	else if(srcdataunit == GUNIT)
		addres = srcdata+packetlen/1024.0/1024.0/1024.0;
	else if(srcdataunit == TUNIT)
		addres = srcdata+packetlen/1024.0/1024.0/1024.0/1024.0;
	else
		addres = srcdata+packetlen;
	if((addres == 0)||
		(addres>DEFAULTGUNIT))
	{
		*totaldata =  (srcdata)/1024.0+packetlen/1024.0;
		*totaldataunit =srcdataunit+1;
	}
	else
	{
		*totaldata = addres;
		*totaldataunit =srcdataunit;
	}
	return 0;
}