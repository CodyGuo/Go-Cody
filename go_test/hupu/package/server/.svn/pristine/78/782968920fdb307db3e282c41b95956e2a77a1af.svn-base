#include "stdafx.h"
#include <Windows.h>
#include <winsvc.h>
#include <string>
#include "InstallWpcap.h"
#include "InstallFunc.h"
#include "../../common/GlobalFunction/GlobalFunction.h"
#include <aclapi.h>
#include <accctrl.h>

using namespace std;

#define COPY_FILE_NUM 2
const char* pCopyNpfFiles[] = {"npf_x86.sys", "npf_x64.sys"}; 
const char* pCopyNacMntorFiles[] = {"HpNacMntor_x86.sys", "HpNacMntor_x64.sys"}; 

void CopyNpfFiles(IN char* pCurPath, OUT string& strNpfDriverPath)
{
	char systemPath[MAX_PATH] = {0};
	string strExistingFile = "";
	string strNewFile = "";

	GetSystemDirectoryA(systemPath, MAX_PATH);
	strExistingFile = (string)pCurPath;

	if (IsWin64Os())
	{
		strExistingFile += pCopyNpfFiles[1];
	}
	else
	{
		strExistingFile += pCopyNpfFiles[0];
	}

	strNewFile = systemPath;
	strNewFile += "\\drivers\\";
	strNewFile += "npf.sys";

	strNpfDriverPath = strNewFile;

	CopyFileA(strExistingFile.c_str(), strNewFile.c_str(), FALSE);
}

void CopyNacMntorFiles(IN char* pCurPath, OUT string& strNacMntorDriverPath)
{
	char systemPath[MAX_PATH] = {0};
	string strExistingFile = "";
	string strNewFile = "";

	GetSystemDirectoryA(systemPath, MAX_PATH);
	strExistingFile = (string)pCurPath;

	if (IsWin64Os())
	{
		strExistingFile += pCopyNacMntorFiles[1];
	}
	else
	{
		strExistingFile += pCopyNacMntorFiles[0];
	}

	strNewFile = systemPath;
	strNewFile += "\\drivers\\";
	strNewFile += "HpNacMntor.sys";

	strNacMntorDriverPath = strNewFile;

	CopyFileA(strExistingFile.c_str(), strNewFile.c_str(), FALSE);
}

void BackupSetupDir(IN string& strFromDir, IN string& strToDir)
{
	try
	{
		string strDirPath = "";
		WIN32_FIND_DATAA wfd;
		HANDLE hFind = NULL;

		strDirPath = strFromDir;
		strDirPath += "\\";
		strDirPath += "*.*";

		CreateDirectoryA(strToDir.c_str(), NULL);

		hFind = FindFirstFileA(strDirPath.c_str(), &wfd);

		if(hFind == INVALID_HANDLE_VALUE)
		{
			return;
		}

		do
		{
			if((strcmp(wfd.cFileName, ".") == 0)||
				(strcmp(wfd.cFileName, "..") == 0))
			{
				continue;
			}

			string strFilePath = "";
			DWORD dwAttributes = INVALID_FILE_ATTRIBUTES; 
			string strSourceDir = "";
			string strDesDir = "";

			strFilePath = strFromDir;
			strFilePath += "\\";
			strFilePath += wfd.cFileName;

			dwAttributes = GetFileAttributesA(strFilePath.c_str());

			if(dwAttributes & FILE_ATTRIBUTE_READONLY)
			{
				dwAttributes &= ~FILE_ATTRIBUTE_READONLY;
				SetFileAttributesA(strFilePath.c_str(), dwAttributes);
			}

			strSourceDir = strFromDir;
			strSourceDir += "\\";
			strSourceDir += wfd.cFileName;

			strDesDir = strToDir;
			strDesDir += "\\";
			strDesDir += wfd.cFileName;

			if(wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
			{
				BackupSetupDir(strSourceDir, strDesDir);
			}
			else
			{
				CopyFileA(strSourceDir.c_str(), strDesDir.c_str(), FALSE);
			}

		}while(FindNextFileA(hFind, &wfd));

		FindClose(hFind);
	}
	catch (...)
	{
#ifdef _DEBUG
		::MessageBox(NULL, L"BackupSetupDir Exception", L"error", 0);
#endif
	}
}

DWORD AddAceToObjectsSecurityDescriptor (LPTSTR pszObjName, SE_OBJECT_TYPE ObjectType) 
{
	DWORD dwRes = 0;
	PACL pACL = NULL;
	EXPLICIT_ACCESS ea;
	SID_IDENTIFIER_AUTHORITY SidAuthNT = SECURITY_NT_AUTHORITY;
	PSID pSystemSid = NULL;

	if (NULL == pszObjName)  
		return ERROR_INVALID_PARAMETER;

	if(!AllocateAndInitializeSid(&SidAuthNT, 1,
		SECURITY_LOCAL_SYSTEM_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pSystemSid)) 
	{
		printf("AllocateAndInitializeSid Error %u\n", GetLastError());
		goto Cleanup; 
	}

	if (SE_REGISTRY_KEY == ObjectType)
	{
		ea.grfAccessPermissions = KEY_ALL_ACCESS;
	}
	else if (SE_FILE_OBJECT == ObjectType)
	{
		ea.grfAccessPermissions = FILE_ALL_ACCESS;
	}
	ea.grfAccessMode = SET_ACCESS;
	ea.grfInheritance= OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE;
	ea.Trustee.MultipleTrusteeOperation = NO_MULTIPLE_TRUSTEE;
	ea.Trustee.pMultipleTrustee = NULL;
	ea.Trustee.TrusteeForm = TRUSTEE_IS_SID;
	ea.Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;
	ea.Trustee.ptstrName  = (LPTSTR)pSystemSid;

	dwRes = SetEntriesInAcl(1, &ea, NULL, &pACL);
	if (ERROR_SUCCESS != dwRes)  
	{
		printf( "SetEntriesInAcl Error %u\n", dwRes);
		goto Cleanup; 
	}  

	dwRes = SetNamedSecurityInfo(pszObjName, ObjectType, DACL_SECURITY_INFORMATION|PROTECTED_DACL_SECURITY_INFORMATION, NULL, NULL, pACL, NULL);
	if (ERROR_SUCCESS != dwRes)  
	{
		printf( "SetNamedSecurityInfo Error %u\n", dwRes );
		goto Cleanup; 
	}  

	printf( "SetNamedSecurityInfo Error %u last error %u\n", dwRes, GetLastError());

Cleanup:
	if (pSystemSid) 
		FreeSid(pSystemSid);
	if (pACL) 
		LocalFree(pACL);

	return dwRes;
}

void CopySetupFilesToHpBackup(IN char* pCurPath)
{
	char tempPath[MAX_PATH] = {0};
	string strSetupPath = "";
	string strHpBackupPath = "";
	wstring wstrHpBackupPath = L"";
	DWORD  dwFileAttri = 0;

	GetWindowsDirectoryA(tempPath, MAX_PATH);
	strSetupPath = tempPath;
	strSetupPath += (string)"\\hpNacIdm";

	GetSystemDirectoryA(tempPath, MAX_PATH);
	strHpBackupPath = tempPath;
	strHpBackupPath += (string)"\\hp_backup";

	BackupSetupDir(strSetupPath, strHpBackupPath);

	dwFileAttri = GetFileAttributesA(strHpBackupPath.c_str());

	if (dwFileAttri != INVALID_FILE_ATTRIBUTES)
	{
		SetFileAttributesA(strHpBackupPath.c_str(), FILE_ATTRIBUTE_ENCRYPTED|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM);
	}
	wstrHpBackupPath = AnsiToWChar(strHpBackupPath.c_str());
	AddAceToObjectsSecurityDescriptor((LPTSTR)wstrHpBackupPath.c_str(), SE_FILE_OBJECT);
}

BOOL StartService( const char* lpszDriverName)
{
	SC_HANDLE        schSCManager;
	SC_HANDLE        schService;

	schSCManager = ::OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (schSCManager != NULL)
	{
		schService = ::OpenServiceA(schSCManager, lpszDriverName, SERVICE_ALL_ACCESS);
		if (schService != NULL)
		{
			::StartService(schService, 0, NULL);
			CloseServiceHandle(schService);
		}
		CloseServiceHandle(schSCManager);
	}
	else
		return FALSE;

	return TRUE;
}

BOOL InstallNTDriver(IN const char* lpszDriverName, IN const char* lpszDriverPath)
{
	BOOL bRet = FALSE;
	SC_HANDLE hScMgr = NULL;
	SC_HANDLE hService = NULL;

	hScMgr = OpenSCManager( NULL, NULL, SC_MANAGER_ALL_ACCESS );

	if( hScMgr == NULL )  
	{
		bRet = FALSE;
		goto GotoEnd;
	}													

	hService = CreateServiceA( hScMgr,
		lpszDriverName, 
		lpszDriverName, 
		SERVICE_ALL_ACCESS, 
		SERVICE_KERNEL_DRIVER,
		SERVICE_AUTO_START, 
		SERVICE_ERROR_IGNORE,
		lpszDriverPath,
		NULL,  
		NULL,  
		NULL,  
		NULL,  
		NULL);  

	if( hService == NULL )  
	{  
		StartService(lpszDriverName);
		bRet = FALSE;
		goto GotoEnd;
	}

	bRet = StartService( hService, NULL, NULL );  
	if( !bRet )  
	{  
		bRet = TRUE;
		goto GotoEnd;
	}

GotoEnd:

	if(hService)
	{
		CloseServiceHandle(hService);
	}

	if(hScMgr)
	{
		CloseServiceHandle(hScMgr);
	}

	return bRet;
}

BOOL UnloadNTDriver(char * szSvrName)  
{
	BOOL bRet = FALSE;
	SC_HANDLE hScMgr = NULL;
	SC_HANDLE hService = NULL;
	SERVICE_STATUS SvrSta;

	hScMgr = OpenSCManager( NULL, NULL, SC_MANAGER_ALL_ACCESS );  
	if( hScMgr == NULL )  
	{
		bRet = FALSE;
		goto GotoEnd;
	}  

	hService = OpenServiceA( hScMgr, szSvrName, SERVICE_ALL_ACCESS );  

	if( hService == NULL )  
	{
		bRet = FALSE;
		goto GotoEnd;
	}  

	ControlService( hService, SERVICE_CONTROL_STOP , &SvrSta );

	if(DeleteService(hService))  
	{
		bRet = TRUE;
	}  

GotoEnd:

	if(hService)
	{
		CloseServiceHandle(hService);
	}

	if(hScMgr)
	{
		CloseServiceHandle(hScMgr);
	}
	return bRet;	
} 

BOOL InstallWpcap()
{
	char curPath[MAX_PATH] = {0};
	string strNpfDriverPath = "";
	BOOL bRet = FALSE;

	GetCurrentPath(curPath);
	CopyNpfFiles(curPath, strNpfDriverPath);
	bRet = InstallNTDriver("npf", strNpfDriverPath.c_str());

	return bRet;
}

BOOL UnloadWpcap()
{
	BOOL bRet = FALSE;

	bRet = UnloadNTDriver("npf");

	return bRet;
}

BOOL InstallNacMntor()
{
	char curPath[MAX_PATH] = {0};
	string strNacMntorDriverPath = "";
	BOOL bRet = FALSE;

	GetCurrentPath(curPath);
	CopyNacMntorFiles(curPath, strNacMntorDriverPath);
	//CopySetupFilesToHpBackup(curPath);
	bRet = InstallNTDriver("HpNacMntor", strNacMntorDriverPath.c_str());

	return bRet;
}

BOOL UnloadNacMntor()
{
	BOOL bRet = FALSE; 

	bRet = UnloadNTDriver("HpNacMntor");

	return bRet;
}