#include "StdAfx.h"
#include "HttpClient.h"
#include "CommPub.h"
#include <Windows.h>
#include <comutil.h>
#include "atlrx.h"
#include "RegExp.h"
#include "StringProcess.h"

#include "DebugInfo.h"

wchar_t *SZ_AGENT = L"HUPUNAC_WINDOWS";

CHttpClient::CHttpClient(const wstring &url)
	  : m_requestURL(url),
      m_sessionHandle(NULL),
      m_requireValidSsl(false),
      m_responseHeader(L""),
      m_responseContent(L""),
      m_responseCharset(L""),
      m_requestHost(L""),
      m_pResponse(NULL),
      m_responseByteCountReceived(0),
      m_responseByteCount(0),
      m_responseCookies(L""),
      m_additionalRequestCookies(L""),
      m_pDataToSend(NULL),
      m_dataToSendSize(0),
      m_proxy(L""),
      m_dwLastError(0),
      m_statusCode(L""),
      m_userAgent(SZ_AGENT),
      m_bForceCharset(false),
      m_proxyUsername(L""),
      m_proxyPassword(L""),
      m_location(L""),
      m_resolveTimeout(0),
      m_connectTimeout(40000),
      m_sendTimeout(20000),
      m_receiveTimeout(20000)
{
	time_t t = time( NULL );
	char  szBuf[128]={"0"};
	strftime( szBuf , 127 , "%A,%d %b %y %H:%M:%S" , gmtime( &t ) );
	wchar_t timestr[128*2] = {L"0"};
	ConvertA2W(szBuf,timestr,sizeof(timestr));
	m_additionalRequestHeaders=L"Date:";
	m_additionalRequestHeaders+=timestr;
	m_additionalRequestHeaders+= L" GMT";
}

CHttpClient::~CHttpClient(void)
{
	 if (m_pResponse != NULL)
    {
        delete[] m_pResponse;
		m_pResponse = NULL;
    }
    if (m_pDataToSend != NULL)
    {
        delete[] m_pDataToSend;
		m_pDataToSend = NULL;
    }

    if (m_sessionHandle != NULL)
    {
        ::WinHttpCloseHandle(m_sessionHandle);
    }
}

bool CHttpClient::SendHttpRequest(const wstring &httpVerb, bool disableAutoRedirect)
{
    bool bRetVal = true;

    try
    {
        WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,"SendHttpRequest Start");

        if (m_requestURL.size() <= 1)
        {
            m_dwLastError = ERROR_PATH_NOT_FOUND;
            return false;
        }
        // Make verb uppercase.
        wstring verb = httpVerb;
        if (_wcsicmp(verb.c_str(), L"GET") == 0)
        {
            verb = L"GET";
        }
        else if (_wcsicmp(verb.c_str(), L"POST") == 0)
        {
            verb = L"POST";
        }
        else
        {
            m_dwLastError = ERROR_INVALID_PARAMETER;
            return false;
        }

        if (m_sessionHandle == NULL)
        {
            m_sessionHandle = ::WinHttpOpen(m_userAgent.c_str(),   
											WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
											WINHTTP_NO_PROXY_NAME, 
											WINHTTP_NO_PROXY_BYPASS,0);

            if (m_sessionHandle == NULL)
            {
                WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL, LOGLOCATION, "WinHttpOpen FAIL,GetLastError",::GetLastError());
                return false;
            }
        }

        if (!::WinHttpSetTimeouts(m_sessionHandle, m_resolveTimeout, m_connectTimeout, m_sendTimeout, m_receiveTimeout))
        {
            char errmsg[MAX_PATH] = {0};
            sprintf_s(errmsg,MAX_PATH,"Error %u in WinHttpSetTimeouts.\n", GetLastError());
            WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL, LOGLOCATION, errmsg);
            //¹Ø±Õ¾ä±ú
            CloseHandle(m_sessionHandle);
            m_sessionHandle = NULL;
            return false;
        }

        wchar_t szHostName[MAX_PATH] = L"";
        wchar_t szURLPath[MAX_PATH * 5] = L"";
        URL_COMPONENTS urlComp;

        memset(&urlComp, 0, sizeof(urlComp));

        urlComp.dwStructSize = sizeof(urlComp);
        urlComp.lpszHostName = szHostName;
        urlComp.dwHostNameLength = MAX_PATH;
        urlComp.lpszUrlPath = szURLPath;
        urlComp.dwUrlPathLength = MAX_PATH * 5;
        urlComp.dwSchemeLength = 1; 

        if (::WinHttpCrackUrl(m_requestURL.c_str(), m_requestURL.size(), 0, &urlComp))
        {
            m_requestHost = szHostName;
            HINTERNET hConnect = NULL;
            hConnect = ::WinHttpConnect(m_sessionHandle, szHostName, urlComp.nPort, 0);
            if (hConnect != NULL)
            {
                DWORD dwOpenRequestFlag = (urlComp.nScheme == INTERNET_SCHEME_HTTPS) ? WINHTTP_FLAG_SECURE : 0;
                HINTERNET hRequest = NULL;
                hRequest = ::WinHttpOpenRequest(hConnect, verb.c_str(),urlComp.lpszUrlPath,NULL,
                    WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES,dwOpenRequestFlag);
                if (hRequest != NULL)
                {
                    // If HTTPS, then client is very susceptable to invalid certificates
                    // Easiest to accept anything for now
                    if (!m_requireValidSsl && urlComp.nScheme == INTERNET_SCHEME_HTTPS)
                    {
                        DWORD options = SECURITY_FLAG_IGNORE_CERT_CN_INVALID | SECURITY_FLAG_IGNORE_CERT_DATE_INVALID
                            | SECURITY_FLAG_IGNORE_UNKNOWN_CA;
                        ::WinHttpSetOption(hRequest,WINHTTP_OPTION_SECURITY_FLAGS,(LPVOID)&options,sizeof(DWORD));
                    }

                    bool bGetReponseSucceed = false;
                    unsigned int iRetryTimes = 0;
				
                    // Retry for several times if fails.
                    while (!bGetReponseSucceed && iRetryTimes++ < HP_HTTP_RETRYTIMES)
                    {
                        if ( m_additionalRequestHeaders.size() > 0 )
                        {
                            if (!::WinHttpAddRequestHeaders(hRequest, 
								m_additionalRequestHeaders.c_str(), 
								m_additionalRequestHeaders.size(), 
                                WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON))
                            {
                                m_dwLastError = ::GetLastError();
                            }
                        }
                        if (m_additionalRequestCookies.size() > 0)
                        {
                            wstring cookies = L"Cookie: ";

                            cookies += m_additionalRequestCookies;

                            if (!::WinHttpAddRequestHeaders(hRequest, cookies.c_str(), cookies.size(), WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON))
                            {
                                m_dwLastError = ::GetLastError();
                            }
                        }
                        if (m_proxy.size() > 0)
                        {
                            SetProxyOption(hRequest);
                        }

                        if (disableAutoRedirect)
                        {
                            DWORD dwDisableFeature = WINHTTP_DISABLE_REDIRECTS;
                            if (!::WinHttpSetOption(hRequest, WINHTTP_OPTION_DISABLE_FEATURE, &dwDisableFeature, sizeof(dwDisableFeature)))
                            {
                                m_dwLastError = ::GetLastError();
                            }
                        }
                        bool bSendRequestSucceed = false;

                        if (hRequest &&
							::WinHttpSendRequest(hRequest, 
							WINHTTP_NO_ADDITIONAL_HEADERS, 
							0, 
							WINHTTP_NO_REQUEST_DATA,
                            0, 
							m_dataToSendSize, 
							NULL))
                        {
                            bSendRequestSucceed = true;
                            WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL, LOGLOCATION, "WinHttpSendRequest sucess");
                        }
                        else
                        {
                            GetIEProxySetting(hRequest,&bSendRequestSucceed);
                        }
                        if (bSendRequestSucceed)
                        {
                            if (m_pDataToSend != NULL)
                            {
                                DWORD dwWritten = 0;

                                if (!::WinHttpWriteData(hRequest,m_pDataToSend,m_dataToSendSize, &dwWritten))
                                {
                                    m_dwLastError = ::GetLastError();
                                }
                            }
                            if (::WinHttpReceiveResponse(hRequest, NULL))
                            {
                                DWORD dwSize = 0;
                                BOOL bResult = FALSE;

                                bResult = ::WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF, WINHTTP_HEADER_NAME_BY_INDEX,NULL,&dwSize,
                                    WINHTTP_NO_HEADER_INDEX);
                                if (bResult || (!bResult && (::GetLastError() == ERROR_INSUFFICIENT_BUFFER)))
                                {
                                    wchar_t *szHeader = new wchar_t[dwSize];
                                    if (szHeader != NULL)
                                    {
                                        memset(szHeader, 0, dwSize* sizeof(wchar_t));
                                        if (::WinHttpQueryHeaders(hRequest,WINHTTP_QUERY_RAW_HEADERS_CRLF,WINHTTP_HEADER_NAME_BY_INDEX,
                                            szHeader,&dwSize,WINHTTP_NO_HEADER_INDEX))
                                        {
                                            WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"HTTP HEADER",szHeader);
                                            m_responseHeader.assign(szHeader);
                                            ParseHttpHeadData();
                                        }
                                        delete[] szHeader;
										szHeader = NULL;
                                    }
                                }

                                dwSize = 0;
                                bResult = ::WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_STATUS_CODE, WINHTTP_HEADER_NAME_BY_INDEX, NULL,
                                    &dwSize, WINHTTP_NO_HEADER_INDEX);
                                if (bResult || (!bResult && (::GetLastError() == ERROR_INSUFFICIENT_BUFFER)))
                                {
                                    wchar_t *szStatusCode = new wchar_t[dwSize];
                                    if (szStatusCode != NULL)
                                    {
                                        memset(szStatusCode, 0, dwSize* sizeof(wchar_t));
                                        if (::WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_STATUS_CODE, WINHTTP_HEADER_NAME_BY_INDEX,
                                            szStatusCode,&dwSize,WINHTTP_NO_HEADER_INDEX))
                                        {
                                            WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"HTTP szStatusCode",szStatusCode);

                                            m_statusCode = szStatusCode;
                                        }
                                        delete[] szStatusCode;
                                        szStatusCode = NULL;
                                    }
                                }

                                unsigned int iMaxBufferSize = HP_HTTP_BUFFERSIZE;
                                unsigned int iCurrentBufferSize = 0;
                                if (m_pResponse != NULL)
                                {
                                    delete[] m_pResponse;
                                    m_pResponse = NULL;
                                }
                                m_pResponse = new BYTE[iMaxBufferSize];
                                if (m_pResponse == NULL)
                                {
                                    bRetVal = false;
                                    break;
                                }
                                memset(m_pResponse, 0, iMaxBufferSize*sizeof(BYTE));
                                do
                                {
                                    dwSize = 0;
                                    if (::WinHttpQueryDataAvailable(hRequest, &dwSize))
                                    {
                                        BYTE *pResponse = new BYTE[dwSize + 1];
                                        if (pResponse != NULL)
                                        {
                                            memset(pResponse, 0, (dwSize + 1)*sizeof(BYTE));
                                            DWORD dwRead = 0;
                                            if (::WinHttpReadData(hRequest,pResponse,dwSize,&dwRead))
                                            {
                                                if (dwRead + iCurrentBufferSize > iMaxBufferSize)
                                                {
                                                   
                                                    BYTE *pOldBuffer = m_pResponse;
                                                    m_pResponse = new BYTE[iMaxBufferSize +dwRead+HP_HTTP_BUFFERSIZE];
                                                    if (m_pResponse == NULL)
                                                    {
                                                        m_pResponse = pOldBuffer;
                                                        bRetVal = false;
                                                        break;
                                                    }
                                                    iMaxBufferSize += dwRead+ HP_HTTP_BUFFERSIZE;
                                                    if ( iMaxBufferSize > 500*1024*1024 )
                                                    {
                                                        bRetVal = false;
                                                        WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL, LOGLOCATION, L"ÏÂÔØÎÄ¼þÊ§°Ü");
                                                        break;
                                                    }
                                                    memset(m_pResponse, 0, iMaxBufferSize*sizeof(BYTE));
                                                    memcpy(m_pResponse, pOldBuffer, iCurrentBufferSize);
                                                    delete[]  pOldBuffer;
                                                    pOldBuffer = NULL;
                                                }
                                                memcpy(m_pResponse + iCurrentBufferSize, pResponse, dwRead);
                                                iCurrentBufferSize += dwRead;

                                                WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"iCurrentBufferSize=",iCurrentBufferSize);
                                             
                                            }
                                            else
                                            {
                                                 m_dwLastError = ::GetLastError();
                                                WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"WinHttpReadData Fail,GetLastError=",m_dwLastError);
                                            }
                                            delete[] pResponse;
                                            pResponse = NULL;
                                        }
                                    }
                                    else
                                    {
                                        m_dwLastError = ::GetLastError();
                                        WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"WinHttpQueryDataAvailable Fail,GetLastError=",m_dwLastError);
                                    }
                                }
                                while (dwSize > 0);

                                m_responseByteCountReceived = iCurrentBufferSize;

                                UINT codePage = CP_ACP;
                                DWORD dwFlag = MB_PRECOMPOSED;
                                if (_wcsnicmp(m_responseCharset.c_str(), L"utf-8", 5) == 0)
                                {
                                    codePage = CP_UTF8;
                                    dwFlag = 0;
                                }
                                int iLength = ::MultiByteToWideChar(codePage, dwFlag, (LPCSTR)m_pResponse, m_responseByteCountReceived + 1, NULL,  0);
                                if (iLength <= 0)
                                {
                                    // Use CP_ACP if UTF-8 fail
                                    codePage = CP_ACP;
                                    dwFlag = MB_PRECOMPOSED;
                                    iLength = ::MultiByteToWideChar(codePage, dwFlag,  (LPCSTR)m_pResponse, m_responseByteCountReceived + 1, 
                                        NULL, 0);
                                }
                                if (iLength > 0)
                                {
                                    wchar_t *wideChar = new wchar_t[iLength];
                                    if (wideChar != NULL)
                                    {
                                        memset(wideChar, 0, iLength * sizeof(wchar_t));
                                        iLength = ::MultiByteToWideChar(codePage, dwFlag,  (LPCSTR)m_pResponse, m_responseByteCountReceived + 1, 
                                            wideChar, iLength);
                                        if (iLength > 0)
                                        {
                                            m_responseContent = wideChar;
                                        }
                                        delete[] wideChar;
										wideChar = NULL;
                                    }
                                    //WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL,LOGLOCATION,L"HTTP DATA2",(wchar_t*)m_responseContent.c_str());
                                }
                                bGetReponseSucceed = true;

                                // If the resposne html web page size is less than 200, retry.
                                if (verb == L"GET" && !disableAutoRedirect)
                                {
                                    wstring regExp = L"{<html>}";
                                    vector<wstring> result;
                                    if (ParseRegExp(regExp, false, 1, m_responseContent, result) && result.size() > 0)
                                    {
                                        regExp = L"{</html>}";
                                        if (!ParseRegExp(regExp, false, 1, m_responseContent, result) || result.size() <= 0)
                                        {
                                            m_dwLastError = ERROR_INVALID_DATA;
                                            bGetReponseSucceed = false;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                m_dwLastError = ::GetLastError();
                            }
                        }
                    } 
                    if (!bGetReponseSucceed)
                    {
                        bRetVal = false;
                    }
                    ::WinHttpCloseHandle(hRequest);
                }
                ::WinHttpCloseHandle(hConnect);
            }
        }
        WriteDebugInfomation(LEVEL_DEBUG, MODULE_ALL, LOGLOCATION,"SendHttpRequest end");
    }
    catch (...)
    {
#ifdef _DEBUG
		::MessageBox(NULL, L"CHttpClient::SendHttpRequest Exception", L"Msg", 0);
#endif
        WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "CHttpClient::SendHttpRequest Exception");
    }

    return bRetVal;
}

wstring CHttpClient::GetResponseHeader(void)
{
    return m_responseHeader;
}

wstring CHttpClient::GetResponseContent(void)
{
    return m_responseContent;
}

wstring CHttpClient::GetResponseCharset(void)
{
    return m_responseCharset;
}

wstring CHttpClient::GetRequestHost(void)
{
    return m_requestHost;
}

bool CHttpClient::SaveResponseToFile(const wstring &filePath)
{
    if (m_pResponse == NULL || m_responseByteCountReceived <= 0)
    {
         WriteExceptionDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "±£´æÎÄ¼þÊ±Òì³£");
        return false;
    }

    WriteDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, L"±£´æÎÄ¼þ");
    WriteDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, (wchar_t*)filePath.c_str());

    FILE *f = NULL;
    int iResult = _wfopen_s(&f, filePath.c_str(), L"wb");
    if (iResult == 0 && f != NULL)
    {
        fwrite(m_pResponse, m_responseByteCountReceived, 1, f);
        fclose(f);
        WriteDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "±£´æÎÄ¼þ³É¹¦");
        return true;
    }
    else
    {
         WriteDebugInfomation(LEVEL_RELEASE, MODULE_ALL, LOGLOCATION, "´ò¿ªÎÄ¼þÊ§°Ü");
    }
    return false;
}

wstring CHttpClient::GetResponseCookies(void)
{
    return m_responseCookies;
}

bool CHttpClient::SetAdditionalRequestCookies(const wstring &cookies)
{
    m_additionalRequestCookies = cookies;

    return true;
}

bool CHttpClient::SetAdditionalDataToSend(BYTE *data, unsigned int dataSize)
{
    if (data == NULL || dataSize < 0)
    {
        return false;
    }

    if (m_pDataToSend != NULL)
    {
        delete[] m_pDataToSend;
    }
    m_pDataToSend = NULL;
    m_pDataToSend = new BYTE[dataSize];
    if (m_pDataToSend != NULL)
    {
        memcpy(m_pDataToSend, data, dataSize);
        m_dataToSendSize = dataSize;
        return true;
    }

    return false;
}

// Reset additional data fields
bool CHttpClient::ResetAdditionalDataToSend(void)
{
    if (m_pDataToSend != NULL)
    {
        delete[] m_pDataToSend;
    }

    m_pDataToSend = NULL;
    m_dataToSendSize = 0;

    return true;
}

// Allow us to reset the url on subsequent requests
bool CHttpClient::g_updateurl(const wstring &url)
{
    m_requestURL = url;
    ResetAdditionalDataToSend();

    return true;
}

bool CHttpClient::SetAdditionalRequestHeaders(const wstring &additionalRequestHeaders)
{
    m_additionalRequestHeaders = additionalRequestHeaders;

    return true;
}

bool CHttpClient::SetProxy(const wstring &proxy)
{
    m_proxy = proxy;

    return true;
}

// If we don't require valid SSL Certs then accept any
// certificate on an SSL connection
bool CHttpClient::SetRequireValidSslCertificates(bool require)
{
    m_requireValidSsl = require;

    return true;
}

const BYTE *CHttpClient::GetRawResponseContent(void)
{
    return m_pResponse;
}

unsigned int CHttpClient::GetRawResponseContentLength(void)
{
    return m_responseByteCount;
}

unsigned int CHttpClient::GetRawResponseReceivedContentLength(void)
{
    return m_responseByteCountReceived;
}

DWORD CHttpClient::GetLastError(void)
{
    return m_dwLastError;
}

wstring CHttpClient::GetResponseStatusCode(void)
{
    return m_statusCode;
}

bool CHttpClient::SetUserAgent(const wstring &userAgent)
{
    m_userAgent = userAgent;

    return true;
}

bool CHttpClient::SetForceCharset(const wstring &charset)
{
    m_responseCharset = charset;

    return true;
}

bool CHttpClient::SetProxyUsername(const wstring &username)
{
    m_proxyUsername = username;

    return true;
}

bool CHttpClient::SetProxyPassword(const std::wstring &password)
{
    m_proxyPassword = password;

    return true;
}
    
wstring CHttpClient::GetResponseLocation(void)
{
    return m_location;
}

bool CHttpClient::SetTimeouts(unsigned int resolveTimeout,
                                unsigned int connectTimeout,
                                unsigned int sendTimeout,
                                unsigned int receiveTimeout)
{
    m_resolveTimeout = resolveTimeout;
    m_connectTimeout = connectTimeout;
    m_sendTimeout = sendTimeout;
    m_receiveTimeout = receiveTimeout;

    return true;
}

bool CHttpClient::SetProxyOption(HINTERNET hReque)
{
    bool SetOptionRes = TRUE;

    WINHTTP_PROXY_INFO proxyInfo;
    memset(&proxyInfo, 0, sizeof(proxyInfo));
    proxyInfo.dwAccessType = WINHTTP_ACCESS_TYPE_NAMED_PROXY;
    wchar_t szProxy[MAX_PATH] = L"";
    wcscpy_s(szProxy, MAX_PATH, m_proxy.c_str());
    proxyInfo.lpszProxy = szProxy;

    if (!::WinHttpSetOption(hReque, WINHTTP_OPTION_PROXY, &proxyInfo, sizeof(proxyInfo)))
    {
        m_dwLastError = ::GetLastError();

        SetOptionRes = FALSE;
    }

    if (m_proxyUsername.size() > 0)
    {
        if (!::WinHttpSetOption(hReque, WINHTTP_OPTION_PROXY_USERNAME, (LPVOID)m_proxyUsername.c_str(), m_proxyUsername.size() * sizeof(wchar_t)))
        {
            m_dwLastError = ::GetLastError();
            SetOptionRes = FALSE;
        }
        if (m_proxyPassword.size() > 0)
        {
            if (!::WinHttpSetOption(hReque, WINHTTP_OPTION_PROXY_PASSWORD, (LPVOID)m_proxyPassword.c_str(), m_proxyPassword.size() * sizeof(wchar_t)))
            {
                m_dwLastError = ::GetLastError();

                SetOptionRes = FALSE;
            }
        }
    }
    return SetOptionRes;
}

bool CHttpClient::GetIEProxySetting(HINTERNET hReque,bool *sendResult)
{
	ASSERT(hReque);

    bool IEProxyResult = TRUE;

    // Query the proxy information from IE setting and set the proxy if any.
    WINHTTP_CURRENT_USER_IE_PROXY_CONFIG proxyConfig;
    memset(&proxyConfig, 0, sizeof(proxyConfig));
    if (::WinHttpGetIEProxyConfigForCurrentUser(&proxyConfig))
    {
        if (proxyConfig.lpszAutoConfigUrl != NULL)
        {
            WINHTTP_AUTOPROXY_OPTIONS autoProxyOptions;
            memset(&autoProxyOptions, 0, sizeof(autoProxyOptions));
            autoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT | WINHTTP_AUTOPROXY_CONFIG_URL;
            autoProxyOptions.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP;
            autoProxyOptions.lpszAutoConfigUrl = proxyConfig.lpszAutoConfigUrl;
            autoProxyOptions.fAutoLogonIfChallenged = TRUE;
            autoProxyOptions.dwReserved = 0;
            autoProxyOptions.lpvReserved = NULL;

            WINHTTP_PROXY_INFO proxyInfo;
            memset(&proxyInfo, 0, sizeof(proxyInfo));

            if (::WinHttpGetProxyForUrl(m_sessionHandle, m_requestURL.c_str(), &autoProxyOptions, &proxyInfo))
            {
                if (::WinHttpSetOption(hReque, WINHTTP_OPTION_PROXY, &proxyInfo, sizeof(proxyInfo)))
                {
                    if (::WinHttpSendRequest(hReque,
                        WINHTTP_NO_ADDITIONAL_HEADERS,
                        0,
                        WINHTTP_NO_REQUEST_DATA,
                        0,
                        0,
                        NULL))
                    {
                        *sendResult = true;
                    }
                }
                if (proxyInfo.lpszProxy != NULL)
                {
                    ::GlobalFree(proxyInfo.lpszProxy);
                }
                if (proxyInfo.lpszProxyBypass != NULL)
                {
                    ::GlobalFree(proxyInfo.lpszProxyBypass);
                }
            }
            else
            {
                IEProxyResult = FALSE;
                m_dwLastError = ::GetLastError();
            }
        }
        else if (proxyConfig.lpszProxy != NULL)
        {
            WINHTTP_PROXY_INFO proxyInfo;

            memset(&proxyInfo, 0, sizeof(proxyInfo));
            proxyInfo.dwAccessType = WINHTTP_ACCESS_TYPE_NAMED_PROXY;
            wchar_t szProxy[MAX_PATH] = L"";
            wcscpy_s(szProxy, MAX_PATH, proxyConfig.lpszProxy);
            proxyInfo.lpszProxy = szProxy;

            if (proxyConfig.lpszProxyBypass != NULL)
            {
                wchar_t szProxyBypass[MAX_PATH] = L"";
                wcscpy_s(szProxyBypass, MAX_PATH, proxyConfig.lpszProxyBypass);
                proxyInfo.lpszProxyBypass = szProxyBypass;
            }

            if (!::WinHttpSetOption(hReque, WINHTTP_OPTION_PROXY, &proxyInfo, sizeof(proxyInfo)))
            {
                IEProxyResult = FALSE;
                m_dwLastError = ::GetLastError();
            }
        }

        if (proxyConfig.lpszAutoConfigUrl != NULL)
        {
            ::GlobalFree(proxyConfig.lpszAutoConfigUrl);
        }
        if (proxyConfig.lpszProxy != NULL)
        {
            ::GlobalFree(proxyConfig.lpszProxy);
        }
        if (proxyConfig.lpszProxyBypass != NULL)
        {
            ::GlobalFree(proxyConfig.lpszProxyBypass);
        }
    }
    else
    {
        IEProxyResult =FALSE;
        m_dwLastError = ::GetLastError();
    }
    return IEProxyResult;
}

void CHttpClient::ParseHttpHeadData()
{
    vector<wstring> result;
    wstring regExp = L"";
    if (!m_bForceCharset)
    {
        regExp = L"charset={[A-Za-z0-9\\-_]+}";
        if (ParseRegExp(regExp, false, 1, m_responseHeader, result) && result.size() > 0)
        {
            m_responseCharset = result[0];
        }
    }
    regExp = L"Content-Length: {[0-9]+}";
    if (ParseRegExp(regExp, false, 1, m_responseHeader, result) && result.size() > 0)
    {
        m_responseByteCount = (unsigned int)_wtoi(result[0].c_str());
    }
    regExp = L"Location: {[0-9]+}";
    if (ParseRegExp(regExp, false, 1, m_responseHeader, result) && result.size() > 0)
    {
        m_location = result[0];
    }
    regExp = L"Set-Cookie:\\b*{.+?}\\n";
    if (ParseRegExp(regExp, false, 1, m_responseHeader, result) && result.size() > 0)
    {
        for (vector<wstring>::size_type i = 0; i < result.size(); i++)
        {
            m_responseCookies += result[i];
            if (i != result.size() - 1)
            {
                m_responseCookies += L"; ";
            }
        }
        m_responseCookies = Trim(m_responseCookies, L" ");
        if (m_responseCookies.size() > 0 && m_responseCookies[m_responseCookies.size() - 1] != L';')
        {
            m_responseCookies += L";";
        }
    }
}
